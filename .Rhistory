help(package=reshape2)
swirl()
0
bye
bye()
swirl()
swirl()
q()
q()
ny
pwd
ls()
ls()
ls()
rm(list=ls())
ls()
ls()
ls()
quit()
n
library(UsingR)
library(ggplot2)
ggplot(diamon, aes(x=carat, y=price)) + geom_point()
ggplot(diamond, aes(x=carat, y=price)) + geom_point()
linear_model <- lm(price ~ carat, data=diamond)
coef(linear_model)
abline(linear_model)
plot(linear_model)
ceof(linear_model)
coeff(linear_model)
coef(linear_model)
summary(linear_model)
linear_model <- lm(price ~ I(carat-mean(caret)), data=diamond)
linear_model <- lm(price ~ I(caret-mean(caret)), data=diamond)
linear_model <- lm(price ~ I(carat-mean(carat)), data=diamond)
coef(linear_model)
linear_model <- lm(price ~ I(carat*10), data=diamond)
coef(linear_model)
newx <- c(.16, .27, .34)
coef(linear_model)
coef(linear_model)[0]
coef(linear_model)[1]
coef(linear_model)[1] + coef(linear_model)[2]*newx
predict(linear_model, newdata=data.frame(carat=newx))
coef(linear_model)[1] + coef(linear_model)[2]*newx
summary(linear_model)
coef(linear_model)[1]
coef(linear_model)[21]
coef(linear_model)[2]
coef(linear_model)[1] + coef(linear_model)[2]*newx
predict(linear_model, newdata=data.frame(carat=newx))
-259+372*newx
-259+372*newx*10
linear_model <- lm(price ~ carat, data=diamond)
data("diamond")
g <- ggplot(diamond, aes(x=carat, y=price))
g <- g + xlab("Mass(carats") + ylab("Price (SIN $)")
g + geom_point(size=7, colour="black", alpha=.5)
g + geom_point(size=7, colour="black", alpha=0)
g + geom_point(size=7, colour="black", alpha=)
g + geom_point(size=7, colour="black", alpha=1)
g + geom_point(size=7, colour="black", alpha=.5)
g + geom_point(size=1, colour="black", alpha=.5)
g + geom_point(colour="black", alpha=.5)
g + geom_point(size=7, colour="black", alpha=.5)
g + geom_point(size=7, colour="black", alpha=.5) + geom_point(size=5, color="blue")
g + geom_point(size=7, colour="black", alpha=.5) + geom_point(size=5, color="blue", alpha=.2)
g <- g + geom_point(size=7, colour="black", alpha=.5) + geom_point(size=5, color="blue", alpha=.2)
g + geom_smooth(method="lm", color="black")
residual(linear_model)
residuals(linear_model)
plot(residuals(linear_model))
summary(linear_model)
summary(linear_model)$sigma
dim(diamond)
linear_model$df
summary(linear_model)
confint(linear_model)
summary(linear_model)$coefficients
residuals(linear_model)
sum(esiduals(linear_model))
sum(residuals(linear_model))
coefficients(lm_model)
coefficients(linear_model)
residuals(linear_model)
sd(residuals(linear_model))
sqrt(sum(residuals(linear_model))^2)
sqrt( sum( residuals(linear_model)^2 ) /(nrow(diamond)-2) )
summary(linear_model)
sum
confint(linear_model)
library(swirl)
swirl()
plot(child ~ parent, galton)
jitter(child, 4)
jitter(galton$child, 4)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child, parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,  lwd=3,col="red")
summary(regrline)
fit <- lm(child ~ parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.quali(lhs, rhs)
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRest <- var(fit$residuals)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal( varChild, varRes+varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm( gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data=galton)
sqrt( residuals(fit)^2/(n-2) )
sqrt( sum(residuals(fit)^2/(n-2)) )
sqrt( sum((fit$residuals)^2/(n-2)) )
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1 - sRes / sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm$(child ~ 1, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., data=swiss)
summary(all)
summary(lm(Fertility ~ agriculture, data=swiss))
summary(lm(Fertility ~ argiculture, data=swiss))
summary(lm(Fertility ~ Argiculture, data=swiss))
summary(lm(Fertility ~ Agriculture, data=swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
cf
fit$coefficients - efit$coefficients
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[, 2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[, 1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spary - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(InsectSprays$count ~ spray2)
summary(fit2)$coef
mean(sC)
(fit$coefficients[3] - fit$coefficients[2]) / 1.6011
(fit$coefficients[2] - fit$coefficients[3]) / 1.6011
(fit$coef[2] - fit$coef[3]) / 1.6011
dim(hunber)
dim(hunger)
948
names(hunber)
names(hunger)
fit <- lm(Numeric ~ Year, hunber )
fit <- lm(Numeric ~ Year, hunger )
summary(fit)$coef
lmF <- lm( Numeric ~ Year, data=hunger, subset(Sex=="Female")  )
lmF <- lm( Numeric ~ Year, data=hunge[Sex=="Female"] )
lmF <- lm( Numeric ~ Year, data=hunger[Sex=="Female"] )
lmF <- lm( Numeric ~ Year, data=hunger[hunger$Sex=="Female"] )
lmF <- lm( Numeric ~ Year, data=hunger[hunger$Sex=="Female", ] )
lmF <- lm( Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunber)
lmF <- lm( Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM <- lm( Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year+Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year+Sex+Year:Sex, hunger)
summary(lmInter)
fit <- lm(y~x, out2)
plot(fit, which =1)
fitno <- lm(y~x, out2[-1, ])
plot(fitno, which =1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1 - resid(fit)[1]/resno
head(hatvalues((fit)))
head(hatvalues((fit)))
head( hatvalues(fit))
sigma <- residuals(fit)/sqrt(deviance(fit)/(nrow(out1)-2))
df.residual(fit)
nrow(out1)
sigma <- sqrt( deviance(fit) / df.residual(fit)  )
rstd <- resid(fit) / sigma / sqrt(1-hatvalues(fit))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which =2)
sigma1 <- sqrt(deviance(fitno) / df.residual(fitno))
resid(fit1)[1]/ sigma1 / sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/ sigma1 / sqrt(1-hatvalues(fit)[1])
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / (2*sigma^2)
plot(fit, which=5)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
resno
1 - resid(fit)[1] / resno
head(out2_
)
head(out2)
(out2$x[1] - mean(out2$x))^2 / sum( (out2$x - mean$x)^2  )
(out2$x[1] - mean(out2$x))^2 / sum( (out2$x - mean(out2$x)^2  )
)
(out2$x[1] - mean(out2$x))^2 / sum( (out2$x - mean(out2$x)^2  ))
hatvalues(fit)[1]
(out2$x[1] - mean(out2$x))^2 / sum( (out2$x - mean(out2$x))^2  )
(out2$x[1] - mean(out2$x))^2 / sum( (out2$x - mean(out2$x))^2  ) + 1/nrow(out2)
out2
out2[1, ]
out2[1, "y"] <- 4
out2[1, ]
fit_wg <- lm(y ~ x, out2)
summary(fit_wg)
hatvalues(fit_wg)[1]
plot(fit_wg)
plot(fit_wg,which=3)
plot(fit_wg,which=1)
plot(fit_wg,which=3)
plot(fit_wg,which=4)
plot(fit_wg,which=3)
plot(fit_wg,which=2)
plot(fit_wg,which=5)
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- residuals(fit) / (sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rrstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1 * sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / (2*sigma^2)
head(cooks.distance(fit))
plot(fit, which=2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3)) / (2)
n <- (deviance(fit1) - deviance(fit3)) / 2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6) ))
exp(lodds) / (1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(.95, 1)
library(caret)
?caret
help(caret)
??caret
pwd
whoami
pwd
ls -lh
ls()
swiss
str(swiss)
ggplot(data=swiss,aes(x=Education,y=Fertility))
ggplot(data=swiss,aes(x=Education,y=Fertility)) + geom_poin()
ggplot(data=swiss,aes(x=Education,y=Fertility)) + geom_point()
ggplot(data=swiss,aes(x=Education,y=Fertility)) + geom_line()
exit
quit()
library(shiny)
pwd
getwd()
cd ..
pwd
getwd('~/studyspace/tmp')
getwd('~/studyspace/data_science/tmp/')
setwd('~/studyspace/data_science/tmp/')
getwd()
runApp('App-1')
runApp('App-1', display.mode = 'showcase')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
?selectInput
selectInput
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('mpg_predictiong_app/')
library(slidify)
getwd()
setwd('mpg_predictiong_app/')
author("Jacky Wang")
?author
author
author("MPG_prediction")
getwd()
setwd("~/studyspace/data_science/tmp/mpg_predictiong_app/")
author("mpg_prediction")
---
;
source('~/.active-rstudio-document', echo=TRUE)
getwd()
slidify(('index.Rmd')
`
;
)
""
"
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
runDeck()
setwd('../../slidify-interactive-25a2f8a/')
dir
ls()
setwd('idocs/')
slidify('index.Rmd')
runDeck()
cd -
;
setwd('../../mpg_prediction/')
setwd('../mpg_predictiong_app/mpg_prediction/')
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
setwd('../mpg_predictiong_app/mpg_prediction/')
runDeck()
runDeck()
setwd('..')
setwd('./mpg_prediction/')
runDeck()
quit
quit()
slidify('./index.Rmd')
slidify('./index.Rmd')
slidify('./index.Rmd')
library(slidify)
slidify('./index.Rmd')
runDeck()
slidify('./index.Rmd')
runDeck()
runDeck()
slidify('./index.Rmd')
runDeck()
runDeck()
slidify('./index.Rmd')
runDeck()
slidify('./index.Rmd')
runDeck()
ls
clc
setwd(../)
setwd(..)
setwd('..')
library(slidify)
getwd()
setwd('..')
getwd()
author('mpg_prediction_slide')
slidify('./index.Rmd')
runDeck()
pwd
getwd()
runDeck()
slidify('index.Rmd')
browseURL('index.html')
runDeck()
runDeck()
quit()
library(slidify)
slidify(('index.Rmd')
)
runDeck()
pwd
setwd('..')
getwd()
author('mpg_prediction_slide')
getwd()
slidify(('index.Rmd')
00000
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
quit
quit()
